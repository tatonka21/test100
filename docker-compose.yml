version: '3.8'

services:
  # Message broker for agent communication
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"  # AMQP protocol
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=agent_platform
      - RABBITMQ_DEFAULT_PASS=agent_platform_password
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Vector database for embeddings and semantic search
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # GRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT_ALLOW_CORS=true

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL for structured data storage
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=agent_platform
      - POSTGRES_PASSWORD=agent_platform_password
      - POSTGRES_DB=agent_platform
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent_platform"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO for object storage (S3 compatible)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=agent_platform
      - MINIO_ROOT_PASSWORD=agent_platform_password
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend web application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    environment:
      - REACT_APP_API_URL=http://localhost:8080
    networks:
      - agent-network

  # Application services
  api-gateway:
    build:
      context: .
      dockerfile: ./src/api_gateway/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - agent-manager
      - agent-runtime
    environment:
      - AGENT_MANAGER_URL=http://agent-manager:8000
      - AGENT_RUNTIME_URL=http://agent-runtime:8001
    networks:
      - agent-network

  agent-manager:
    build:
      context: .
      dockerfile: ./src/agent_manager/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - rabbitmq
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=agent_platform
      - POSTGRES_PASSWORD=agent_platform_password
      - POSTGRES_DB=agent_platform
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=agent_platform
      - RABBITMQ_PASS=agent_platform_password
    networks:
      - agent-network
      - default

  agent-runtime:
    build:
      context: .
      dockerfile: ./src/agent_runtime/Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - rabbitmq
      - redis
      - qdrant
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=agent_platform
      - POSTGRES_PASSWORD=agent_platform_password
      - POSTGRES_DB=agent_platform
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=agent_platform
      - RABBITMQ_PASS=agent_platform_password
      - REDIS_HOST=redis
      - QDRANT_HOST=qdrant
    networks:
      - agent-network
      - default

networks:
  agent-network:
    driver: bridge

volumes:
  rabbitmq_data:
  qdrant_data:
  redis_data:
  postgres_data:
  minio_data:
